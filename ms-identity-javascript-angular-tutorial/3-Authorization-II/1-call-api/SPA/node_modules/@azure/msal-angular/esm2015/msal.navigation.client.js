/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { __awaiter } from "tslib";
import { NavigationClient, UrlString } from "@azure/msal-browser";
import { Router } from "@angular/router";
import { Location } from "@angular/common";
import { MsalService } from "./msal.service";
import { Injectable } from "@angular/core";
/**
 * Custom navigation used for Angular client-side navigation.
 * See performance doc for details:
 * https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-angular/docs/v2-docs/performance.md
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './msal.service';
import * as ɵngcc2 from '@angular/router';
import * as ɵngcc3 from '@angular/common';
export class MsalCustomNavigationClient extends NavigationClient {
    constructor(authService, router, location) {
        super();
        this.authService = authService;
        this.router = router;
        this.location = location;
    }
    navigateInternal(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            this.authService.getLogger().verbose("MsalCustomNavigationClient called");
            const urlComponents = new UrlString(url).getUrlComponents();
            // Normalizing newUrl if no query string
            const newUrl = urlComponents.QueryString ? `${urlComponents.AbsolutePath}?${urlComponents.QueryString}` : this.location.normalize(urlComponents.AbsolutePath);
            // Replaces current state if noHistory flag set to true
            this.authService.getLogger().verbosePii(`MsalCustomNavigationClient - navigating to newUrl: ${newUrl}`);
            // Prevent hash clearing from causing an issue with Client-side navigation after redirect is handled
            if (options.noHistory) {
                window.location.replace(newUrl);
            }
            else {
                this.router.navigateByUrl(newUrl, { replaceUrl: options.noHistory });
            }
            return Promise.resolve(options.noHistory);
        });
    }
}
MsalCustomNavigationClient.ɵfac = function MsalCustomNavigationClient_Factory(t) { return new (t || MsalCustomNavigationClient)(ɵngcc0.ɵɵinject(ɵngcc1.MsalService), ɵngcc0.ɵɵinject(ɵngcc2.Router), ɵngcc0.ɵɵinject(ɵngcc3.Location)); };
MsalCustomNavigationClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MsalCustomNavigationClient, factory: MsalCustomNavigationClient.ɵfac });
MsalCustomNavigationClient.ctorParameters = () => [
    { type: MsalService },
    { type: Router },
    { type: Location }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MsalCustomNavigationClient, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.MsalService }, { type: ɵngcc2.Router }, { type: ɵngcc3.Location }]; }, null); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXNhbC5uYXZpZ2F0aW9uLmNsaWVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21zYWwubmF2aWdhdGlvbi5jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFxQixTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7Ozs7QUFFSCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsZ0JBQWdCO0FBQ2hFLElBQ0ksWUFDWSxXQUF3QixFQUN4QixNQUFjLEVBQ2QsUUFBa0I7QUFDL0IsUUFDSyxLQUFLLEVBQUUsQ0FBQztBQUNoQixRQUxnQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUFFLFFBQzFCLFdBQU0sR0FBTixNQUFNLENBQVE7QUFBRSxRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQ2xDLElBRUksQ0FBQztBQUNMLElBQ1UsZ0JBQWdCLENBQUMsR0FBVSxFQUFFLE9BQTBCO0FBQUs7QUFDekIsWUFBckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUNsRixZQUFRLE1BQU0sYUFBYSxHQUFHLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7QUFDcEUsWUFDUSx3Q0FBd0M7QUFDaEQsWUFBUSxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxZQUFZLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDdEssWUFDUSx1REFBdUQ7QUFDL0QsWUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxzREFBc0QsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNoSCxZQUNRLG9HQUFvRztBQUM1RyxZQUFRLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUMvQixnQkFBWSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1QyxhQUFTO0FBQUUsaUJBQUk7QUFDZixnQkFBWSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7QUFDakYsYUFBUztBQUNULFlBQVEsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNsRCxRQUFJLENBQUM7QUFDSCxLQURHO0FBQ0w7d0RBN0JDLFVBQVU7OElBQ1Q7QUFBRTtBQUFxRCxZQVRoRCxXQUFXO0FBQUssWUFGaEIsTUFBTTtBQUFLLFlBQ1gsUUFBUTtBQUFJOzs7O0FBUEEsQUFHQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBSUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUE1QkEsQUFBQSxBQVJBLEFBQUEsQUFGQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTmF2aWdhdGlvbkNsaWVudCwgTmF2aWdhdGlvbk9wdGlvbnMsIFVybFN0cmluZyB9IGZyb20gXCJAYXp1cmUvbXNhbC1icm93c2VyXCI7XHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcclxuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XHJcbmltcG9ydCB7IE1zYWxTZXJ2aWNlIH0gZnJvbSBcIi4vbXNhbC5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuLyoqXHJcbiAqIEN1c3RvbSBuYXZpZ2F0aW9uIHVzZWQgZm9yIEFuZ3VsYXIgY2xpZW50LXNpZGUgbmF2aWdhdGlvbi5cclxuICogU2VlIHBlcmZvcm1hbmNlIGRvYyBmb3IgZGV0YWlsczpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlQUQvbWljcm9zb2Z0LWF1dGhlbnRpY2F0aW9uLWxpYnJhcnktZm9yLWpzL3RyZWUvZGV2L2xpYi9tc2FsLWFuZ3VsYXIvZG9jcy92Mi1kb2NzL3BlcmZvcm1hbmNlLm1kXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBNc2FsQ3VzdG9tTmF2aWdhdGlvbkNsaWVudCBleHRlbmRzIE5hdmlnYXRpb25DbGllbnQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IE1zYWxTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsIFxyXG4gICAgICAgIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG5hdmlnYXRlSW50ZXJuYWwodXJsOnN0cmluZywgb3B0aW9uczogTmF2aWdhdGlvbk9wdGlvbnMpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLmdldExvZ2dlcigpLnZlcmJvc2UoXCJNc2FsQ3VzdG9tTmF2aWdhdGlvbkNsaWVudCBjYWxsZWRcIik7XHJcbiAgICAgICAgY29uc3QgdXJsQ29tcG9uZW50cyA9IG5ldyBVcmxTdHJpbmcodXJsKS5nZXRVcmxDb21wb25lbnRzKCk7XHJcblxyXG4gICAgICAgIC8vIE5vcm1hbGl6aW5nIG5ld1VybCBpZiBubyBxdWVyeSBzdHJpbmdcclxuICAgICAgICBjb25zdCBuZXdVcmwgPSB1cmxDb21wb25lbnRzLlF1ZXJ5U3RyaW5nID8gYCR7dXJsQ29tcG9uZW50cy5BYnNvbHV0ZVBhdGh9PyR7dXJsQ29tcG9uZW50cy5RdWVyeVN0cmluZ31gIDogdGhpcy5sb2NhdGlvbi5ub3JtYWxpemUodXJsQ29tcG9uZW50cy5BYnNvbHV0ZVBhdGgpO1xyXG5cclxuICAgICAgICAvLyBSZXBsYWNlcyBjdXJyZW50IHN0YXRlIGlmIG5vSGlzdG9yeSBmbGFnIHNldCB0byB0cnVlXHJcbiAgICAgICAgdGhpcy5hdXRoU2VydmljZS5nZXRMb2dnZXIoKS52ZXJib3NlUGlpKGBNc2FsQ3VzdG9tTmF2aWdhdGlvbkNsaWVudCAtIG5hdmlnYXRpbmcgdG8gbmV3VXJsOiAke25ld1VybH1gKTtcclxuXHJcbiAgICAgICAgLy8gUHJldmVudCBoYXNoIGNsZWFyaW5nIGZyb20gY2F1c2luZyBhbiBpc3N1ZSB3aXRoIENsaWVudC1zaWRlIG5hdmlnYXRpb24gYWZ0ZXIgcmVkaXJlY3QgaXMgaGFuZGxlZFxyXG4gICAgICAgIGlmIChvcHRpb25zLm5vSGlzdG9yeSkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShuZXdVcmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwobmV3VXJsLCB7IHJlcGxhY2VVcmw6IG9wdGlvbnMubm9IaXN0b3J5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG9wdGlvbnMubm9IaXN0b3J5KTtcclxuICAgIH1cclxufVxyXG4iXX0=